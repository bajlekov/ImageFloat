for (step in 1:201) {
sess$run(train)
if (step %% 20 == 0)
cat(step, "-", sess$run(W), sess$run(b), "\n")
}
y
W = tf$Variable(tf$random_uniform(shape(1L), -1.0, 1.0), name = "W")
b = tf$Variable(tf$zeros(shape(1L)), name = "b")
y = W * x_data + b
y
W
b
library(tensorflow)
x_data = runif(100, min=0, max=1)
y_data = x_data * 0.1 + 0.3 + rnorm(100, sd=0.05)
W = tf$Variable(tf$random_uniform(shape(1L), -1.0, 1.0), name = "W")
b = tf$Variable(tf$zeros(shape(1L)), name = "b")
y = W * x_data + b
loss = tf$reduce_mean((y - y_data) ^ 2)
optimizer = tf$train$GradientDescentOptimizer(0.2)
train = optimizer$minimize(loss)
sess = tf$Session()
sess$run(tf$global_variables_initializer())
for (step in 1:501) {
sess$run(train)
if (step %% 50 == 0)
cat(step, "-", sess$run(W), sess$run(b), "\n")
}
library(tfestimators)
response <- function() "Species"
features <- function() setdiff(names(iris), response())
features <- function() setdiff(names(iris), response())
features()
response()
set.seed(123)
partitions = modelr::resample_partition(iris, c(test = 0.2, train = 0.8))
install.packages("modelr")
partitions = modelr::resample_partition(iris, c(test = 0.2, train = 0.8))
iris_train = as.data.frame(partitions$train)
iris_test  = as.data.frame(partitions$test)
View(iris_test)
partitions$test
features
features()
column_numeric(features())
feature_columns(column_numeric(features()))
feature_columns = feature_columns(column_numeric(features()))
classifier = dnn_classifier(
feature_columns = feature_columns,
hidden_units = c(10, 20, 10),
n_classes = 3
)
iris_input_fn = function(data) input_fn(data, features = features(), response = response())
iris_input_fn
iris_input_fn(iris_train)
input_fn
iris_input_fn = function(data) input_fn(data, features = features(), response = response())
train(classifier, input_fn = iris_input_fn(iris_train))
train(classifier, input_fn = iris_input_fn(iris_train))
train(classifier, input_fn = iris_input_fn(iris_train))
train(classifier, input_fn = iris_input_fn(iris_train))
train(classifier, input_fn = iris_input_fn(iris_train))
train(classifier, input_fn = iris_input_fn(iris_train))
predictions = predict(classifier, input_fn = iris_input_fn(iris_test))
evaluation =evaluate(classifier, input_fn = iris_input_fn(iris_test))
evaluation = evaluate(classifier, input_fn = iris_input_fn(iris_test))
train(classifier, input_fn = iris_input_fn(iris_train))
predictions = predict(classifier, input_fn = iris_input_fn(iris_test))
evaluation = evaluate(classifier, input_fn = iris_input_fn(iris_test))
predictions
as.data.frame(predictions)
as.data.frame(evaluation)
train(classifier, input_fn = iris_input_fn(iris_train), steps = 10)
library(tfestimators)
mtcars_input_fn = function(data, num_epochs = 1) {
input_fn(data,
features = c("disp", "cyl"),
response = "mpg",
batch_size = 32,
num_epochs = num_epochs)
}
cols = feature_columns(
column_numeric("disp"),
column_numeric("cyl")
)
cols = feature_columns(column_numeric("disp", "cyl")
)
cols = feature_columns(column_numeric("disp", "cyl"))
model = linear_regressor(feature_columns = cols)
model
partitions = modelr::resample_partition(mtcars, c(test = 0.2, train = 0.8))
iris_train = as.data.frame(partitions$train)
iris_test  = as.data.frame(partitions$test)
train = as.data.frame(partitions$train)
test  = as.data.frame(partitions$test)
library(tfestimators)
mtcars_input_fn = function(data, num_epochs = 1) {
input_fn(data,
features = c("disp", "cyl"),
response = "mpg",
batch_size = 32,
num_epochs = num_epochs)
}
cols = feature_columns(column_numeric("disp", "cyl"))
model = linear_regressor(feature_columns = cols)
partitions = modelr::resample_partition(mtcars, c(test = 0.2, train = 0.8))
train = as.data.frame(partitions$train)
test  = as.data.frame(partitions$test)
train(model, mtcars_input_fn(train, 10))
train(model, mtcars_input_fn(train, 50))
train(model, mtcars_input_fn(train, 100))
train(model, mtcars_input_fn(train, 100))
train(model, mtcars_input_fn(train, 1000))
train(model, mtcars_input_fn(train, 1000))
evaluate(model, mtcars_input_fn(test))
evaluate(model, mtcars_input_fn(test))
a = 5
a %>% print
a %>% print()
install.packages('rdataretriever')
rdataretriever::datasets()
rdataretriever::datasets()
rdataretriever::fetch("wine-quality")
data = rdataretriever::fetch("wine-quality")
View(data)
data$wine_quality_red
d = data$wine_quality_red
View(d)
nrf24 <- read.table("C:/Users/Galin/Desktop/nrf24.csv", quote="\"", comment.char="")
View(nrf24)
plot(diff(nrf24$V1))
d = diff(nrf24$V1)
d[d<0] = NA
d = na.omit(d)
d
plot(d)
hist(d)
hist(d[d>1])
length(d)
counts(d[d>1])
summary(d[d>1])
count.fields(d[d>1])
hist(d[d>1])
h = hist(d[d>1], )
h
h = hist(d[d>1], breaks = 1:25)
h = hist(d[d>1], breaks = 1:max(d))
h
plot(h$breaks[2:],h$counts)
plot(h$breaks[-1],h$counts)
plot(h$breaks[-1],h$counts, type="l")
plot(h$breaks[-1], h$counts/length(d), type="l")
plot(h$breaks[-1], h$counts/length(d), type="b")
plot(h$breaks[-1], h$counts/length(d), type="p")
plot(h$breaks[-1], h$counts/length(d), type="q")
plot(h$breaks[-1], h$counts/length(d), type="l")
plot(h$breaks[-1], h$counts/length(d), type="s")
library(odbc)
con <- dbConnect(odbc::odbc(), .connection_string = "Driver={SQLite3 ODBC Driver};",
database = "C:\\Users\\Galin\\PycharmProjects\\mqtt\\db.sqlite")
shiny::runGadget(sparklyr::connection_spark_shinyapp(), viewer = .rs.embeddedViewer)
install.packages("imager")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
log(0.25)
log(0.25)/log(0.5)
log(0.26)/log(0.5)
2^1.94
0.5^1.94
(-.3)^1.94
cos(-1)
cos(-pi)
sin(-pi)
sin(0)
floor(sin(((-5):5)/5*pi)*5)
floor(sin(abs(((-5):5))/5*pi)*5)
floor(sin(abs((-5):5)/5*pi)*5)
sin(0.5)
sin(pi)
sin(0)
sin(0)
sin(pi)
sin(pi/2)
cos(pi/2)
cos(0)
install_github('kuperov/fit')
install.packages('devtools') # if you don't already have it
library(devtools)
install_github('kuperov/fit')
install.packages('devtools') # if you don't already have it
library(devtools)
install_github('kuperov/fit')
source('~/analyze vivosmart.R', echo=TRUE)
View(data)
View(activityData)
View(data)
read.fit("C:/Users/Galin/Desktop/S89E2245.FIT")
data = read.fit("C:/Users/Galin/Desktop/S89E2245.FIT")
View(data)
source('~/.active-rstudio-document', echo=TRUE)
View(data)
data = read.fit("F:/GARMIN/SLEEP/S89E2319.FIT")
View(data)
source('~/.active-rstudio-document', echo=TRUE)
View(data)
View(activityData)
source('~/analyze vivosmart.R', echo=TRUE)
View(data)
source('~/analyze vivosmart.R', echo=TRUE)
install.packages("shiny")
library(shiny)
runExample("01_hello")
ui = fluidPage(
titlePanel("Hello Shiny!"),
sidebarLayout(
sidebarPanel( sliderInput(inputId = "bins", label = "Number of bins:", min = 1, max = 50, value = 30) ),
mainPanel( plotOutput(outputId = "distPlot") )
)
)
server = function(input, output) {
output$distPlot = renderPlot({
x    = faithful$waiting
bins = seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#75AADB", border = "white", xlab = "Waiting time to next eruption (in mins)", main = "Histogram of waiting times")
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui = fluidPage(
titlePanel("Hello Shiny!"),
sidebarLayout(
sidebarPanel( sliderInput(inputId = "bins", label = "Number of bins:", min = 1, max = 50, value = 30) ),
mainPanel( plotOutput(outputId = "distPlot") )
)
)
server = function(input, output) {
output$distPlot = renderPlot({
x    = faithful$waiting
bins = seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, xlab = "Waiting time to next eruption (in mins)", main = "Histogram of waiting times")
})
}
shinyApp(ui = ui, server = server)
source('C:/Users/Galin/Dropbox/ImageFloat3/doc/source/figures.R', echo=TRUE)
o = b*(i-1)^2*i
parametric2 = function(i, b) {
o = b*(i-1)^2*i
return(o)
}
parametric4 = function(i, b) {
o = -b*(i-1)*(2*i-1)^2
o[i<0.5] = 0
return(o)
}
parametric1 = function(i, b) {
o = b*i*(2*i-1)^2
o[i>0.5] = 0
return(o)
}
parametric2 = function(i, b) {
o = b*(i-1)^2*i
return(o)
}
parametric3 = function(i, b) {
o = -b*(i-1)*i^2
return(o)
}
parametric4 = function(i, b) {
o = -b*(i-1)*(2*i-1)^2
o[i<0.5] = 0
return(o)
}
library(manipulate)
manipulate(
{
O1 = Input + parametric2(Input, p2/100) + parametric3(Input, p3/100)
O2 = O1 + parametric1(Input, p1/100)*O1 + parametric4(Input, p4/100)*(1-O1)
plot(Input, O2, "l")
},
p1=slider(-100,100),
p2=slider(-100,100),
p3=slider(-100,100),
p4=slider(-100,100))
parametric1 = function(i, b) {
o = 2*b*i*(2*i-1)^2
o[i>0.5] = 0
return(o)
}
parametric2 = function(i, b) {
o = b*(i-1)^2*i
return(o)
}
parametric3 = function(i, b) {
o = -b*(i-1)*i^2
return(o)
}
parametric4 = function(i, b) {
o = -2*b*(i-1)*(2*i-1)^2
o[i<0.5] = 0
return(o)
}
library(manipulate)
manipulate(
{
O1 = Input + parametric2(Input, p2/100) + parametric3(Input, p3/100)
O2 = O1 + parametric1(Input, p1/100)*O1 + parametric4(Input, p4/100)*(1-O1)
plot(Input, O2, "l")
},
p1=slider(-100,100),
p2=slider(-100,100),
p3=slider(-100,100),
p4=slider(-100,100))
parametric1 = function(i, b) {
o = 2*b*i*(2*i-1)^2
o[i>0.5] = 0
return(o)
}
parametric2 = function(i, b) {
o = b*(i-1)^2*i
return(o)
}
parametric3 = function(i, b) {
o = -b*(i-1)*i^2
return(o)
}
parametric4 = function(i, b) {
o = -2*b*(i-1)*(2*i-1)^2
o[i<0.5] = 0
return(o)
}
library(manipulate)
manipulate(
{
O1 = Input + parametric2(Input, p2/100) + parametric3(Input, p3/100)
O2 = O1 + parametric1(Input, p1/100)*O1 + parametric4(Input, p4/100)*(1-O1)
plot(Input, O2, "l")
},
p1=slider(-100,100),
p2=slider(-100,100),
p3=slider(-100,100),
p4=slider(-100,100))
d1 = data.frame(x = Input, y = parametric1(Input, 1), b = "+1.0", p="Shadows")
d2 = data.frame(x = Input, y = parametric1(Input, -1), b = "-1.0", p="Shadows")
d3 = data.frame(x = Input, y = parametric2(Input, 1), b = "+1.0", p="Darks")
d4 = data.frame(x = Input, y = parametric2(Input, -1), b = "-1.0", p="Darks")
d5 = data.frame(x = Input, y = parametric3(Input, 1), b = "+1.0", p="Lights")
d6 = data.frame(x = Input, y = parametric3(Input, -1), b = "-1.0", p="Lights")
d7 = data.frame(x = Input, y = parametric4(Input, 1), b = "+1.0", p="Highlights")
d8 = data.frame(x = Input, y = parametric4(Input, -1), b = "-1.0", p="Highlights")
d9 = data.frame(x = Input, y = d3$y + d5$y, b = "+1.0", p="Darks + Lights")
d10 = data.frame(x = Input, y = d4$y + d6$y, b = "-1.0", p="Darks + Lights")
data = rbind(d1, d3, d9, d5, d7)
data$b = factor(data$b)
p = qplot(data = data, x = x, y = y, color = p, geom="line", group = interaction(b, p), size = I(1)) +
scale_color_brewer(palette = "Dark2", guide = guide_legend(label.position = "top")) +
xlab("Input") + ylab("F (V = +1.0)") + ggtitle("Parametric Curves") +
theme(legend.position="top") +
theme(plot.title = element_text(hjust = 0.5)) +
theme(legend.title=element_blank()) + theme(legend.key.width = unit(1.5,"cm"))
plot(p)
data = rbind(d1, d3, d5, d7)
data$b = factor(data$b)
p = qplot(data = data, x = x, y = y, color = p, geom="line", group = interaction(b, p), size = I(1)) +
scale_color_brewer(palette = "Dark2", guide = guide_legend(label.position = "top")) +
xlab("Input") + ylab("F (V = +1.0)") + ggtitle("Parametric Curves") +
theme(legend.position="top") +
theme(plot.title = element_text(hjust = 0.5)) +
theme(legend.title=element_blank()) + theme(legend.key.width = unit(1.5,"cm"))
plot(p)
ggsave("parametric/plot.png", p, width = 4, height = 4, units="in", dpi=120, bg="transparent")
plot(p)
ggsave("parametric/plot.png", p, width = 4, height = 3, units="in", dpi=120, bg="transparent")
source('C:/Users/Galin/Dropbox/ImageFloat3/doc/source/figures.R', echo=TRUE)
source('C:/Users/Galin/Dropbox/ImageFloat3/doc/source/figures.R', echo=TRUE)
source('C:/Users/Galin/Dropbox/ImageFloat3/doc/source/figures.R', echo=TRUE)
parametric1 = function(i, b) {
o = b*i*(2*i-1)^2
o[i>0.5] = 0
return(o)
}
parametric2 = function(i, b) {
o = b*(i-1)^2*i
return(o)
}
parametric3 = function(i, b) {
o = -b*(i-1)*i^2
return(o)
}
parametric4 = function(i, b) {
o = -b*(i-1)*(2*i-1)^2
o[i<0.5] = 0
return(o)
}
library(manipulate)
manipulate(
{
O1 = Input + parametric2(Input, p2/100) + parametric3(Input, p3/100)
O2 = O1 + parametric1(Input, p1/100)*(Input/O1) + parametric4(Input, p4/100)*(1-Input/O1)
plot(Input, O2, "l")
},
p1=slider(-100,100),
p2=slider(-100,100),
p3=slider(-100,100),
p4=slider(-100,100))
parametric1 = function(i, b) {
o = b*i*(2*i-1)^2
o[i>0.5] = 0
return(o)
}
parametric2 = function(i, b) {
o = b*(i-1)^2*i
return(o)
}
parametric3 = function(i, b) {
o = -b*(i-1)*i^2
return(o)
}
parametric4 = function(i, b) {
o = -b*(i-1)*(2*i-1)^2
o[i<0.5] = 0
return(o)
}
library(manipulate)
manipulate(
{
O1 = Input + parametric2(Input, p2/100) + parametric3(Input, p3/100)
O2 = O1 + parametric1(Input, p1/100)*O1 + parametric4(Input, p4/100)*(1-O1)
plot(Input, O2, "l")
},
p1=slider(-100,100),
p2=slider(-100,100),
p3=slider(-100,100),
p4=slider(-100,100))
manipulate(
{
O1 = Input + parametric2(Input, p2/100) + parametric3(Input, p3/100)
O2 = O1 + parametric1(Input, p1/100)*(O1/I) + parametric4(Input, p4/100)*(1-O1)
plot(Input, O2, "l")
},
p1=slider(-100,100),
p2=slider(-100,100),
p3=slider(-100,100),
p4=slider(-100,100))
O1 = Input + parametric2(Input, p2/100) + parametric3(Input, p3/100)
library(manipulate)
manipulate(
{
O1 = Input + parametric2(Input, p2/100) + parametric3(Input, p3/100)
O2 = O1 + parametric1(Input, p1/100)*(O1/Input) + parametric4(Input, p4/100)*(1-O1)
plot(Input, O2, "l")
},
p1=slider(-100,100),
p2=slider(-100,100),
p3=slider(-100,100),
p4=slider(-100,100))
library(manipulate)
manipulate(
{
O1 = Input + parametric2(Input, p2/100) + parametric3(Input, p3/100)
O2 = O1 + parametric1(Input, p1/100)*O1/Input + parametric4(Input, p4/100)*(1-I)(1-O1)
plot(Input, O2, "l")
},
p1=slider(-100,100),
p2=slider(-100,100),
p3=slider(-100,100),
p4=slider(-100,100))
library(manipulate)
manipulate(
{
O1 = Input + parametric2(Input, p2/100) + parametric3(Input, p3/100)
O2 = O1 + parametric1(Input, p1/100)*O1/Input + parametric4(Input, p4/100)*(1-Input)(1-O1)
plot(Input, O2, "l")
},
p1=slider(-100,100),
p2=slider(-100,100),
p3=slider(-100,100),
p4=slider(-100,100))
manipulate(
{
O1 = Input + parametric2(Input, p2/100) + parametric3(Input, p3/100)
O2 = O1 + parametric1(Input, p1/100)*O1/Input + parametric4(Input, p4/100)*(1-O1)/(1-Input)
plot(Input, O2, "l")
},
p1=slider(-100,100),
p2=slider(-100,100),
p3=slider(-100,100),
p4=slider(-100,100))
d1 = data.frame(x = Input, y = parametric1(Input, 1), b = "+1.0", p="Shadows")
d2 = data.frame(x = Input, y = parametric1(Input, -1), b = "-1.0", p="Shadows")
d3 = data.frame(x = Input, y = parametric2(Input, 1), b = "+1.0", p="Darks")
d4 = data.frame(x = Input, y = parametric2(Input, -1), b = "-1.0", p="Darks")
d5 = data.frame(x = Input, y = parametric3(Input, 1), b = "+1.0", p="Lights")
d6 = data.frame(x = Input, y = parametric3(Input, -1), b = "-1.0", p="Lights")
d7 = data.frame(x = Input, y = parametric4(Input, 1), b = "+1.0", p="Highlights")
d8 = data.frame(x = Input, y = parametric4(Input, -1), b = "-1.0", p="Highlights")
d9 = data.frame(x = Input, y = d3$y + d5$y, b = "+1.0", p="Darks + Lights")
d10 = data.frame(x = Input, y = d4$y + d6$y, b = "-1.0", p="Darks + Lights")
data = rbind(d1, d3, d5, d7)
data$b = factor(data$b)
p = qplot(data = data, x = x, y = y, color = p, geom="line", group = interaction(b, p), size = I(1)) +
scale_color_brewer(palette = "Dark2", guide = guide_legend(label.position = "top")) +
xlab("Input") + ylab("F (V = +1.0)") + ggtitle("Parametric Curves") +
theme(legend.position="top") +
theme(plot.title = element_text(hjust = 0.5)) +
theme(legend.title=element_blank()) + theme(legend.key.width = unit(1.5,"cm"))
plot(p)
ggsave("parametric/plot.png", p, width = 4, height = 3, units="in", dpi=120, bg="transparent")
