--  Copyright (C) 2011-2020 G. Bajlekov
--
--  Ivy is free software: you can redistribute it and/or modify
--  it under the terms of the GNU General Public License as published by
--  the Free Software Foundation, either version 3 of the License, or
--  (at your option) any later version.
--
--  Ivy is distributed in the hope that it will be useful,
--  but WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--  GNU General Public License for more details.
--
--  You should have received a copy of the GNU General Public License
--  along with this program.  If not, see <http://www.gnu.org/licenses/>.

const eps = 0.0001

function negate(a, b)
	return 1.0 - abs(1.0 - a - b)
end

function exclude(a, b)
	return a + b - 2.0*a*b
end

function screen(a, b)
	return 1.0 - (1.0-a)*(1.0-b)
end

function overlay(a, b)
	if a<0.5 then
		return 2.0*a*b
	else
		return 1.0 - 2.0*(1.0 - a)*(1.0 - b)
	end
end

-- http://www.pegtop.net/delphi/articles/blendmodes/hardlight.htm
function hardlight(a, b)
	if b<0.5 then
		return 2.0*a*b
	else
		return 1.0 - 2.0*(1.0 - a)*(1.0 - b)
	end
end -- overlay with a and b swapped

-- http://www.pegtop.net/delphi/articles/blendmodes/softlight.htm
function softlight(a, b)
	return (1.0 - 2.0*b)*a^2 + 2.0*a*b
end

-- http://www.pegtop.net/delphi/articles/blendmodes/dodge.htm
function dodge(a, b)
	return a/(1.0 - b + eps)
end

function softdodge(a, b)
	if a+b<1.0 then
		return 0.5*a/(1.0 - b + eps)
	else
		return 1.0 - 0.5*(1.0 - b)/(a + eps)
	end
end

-- http://www.pegtop.net/delphi/articles/blendmodes/burn.htm
function burn(a, b)
	return 1.0 - (1.0 - a)/(b + eps)
end

function softburn(a, b)
	if a+b<1.0 then
		return 0.5*b/(1.0 - a  + eps)
	else
		return 1.0 - 0.5*(1.0 - a)/(b + eps)
	end
end

-- darktable
function linearlight(a, b)
	return a + 2.0*b - 1.0
end

-- darktable
function vividlight(a, b)
	if b>0.5 then
		return a/(2.0 - 2.0*b + eps)
	else
		return 1.0 - (1.0 - a)/(2.0*b + eps)
	end
end

-- darktable
function pinlight(a, b)
	if b>0.5 then
		return max(a, 2.0*b - 1.0)
	else
		return min(a, 2.0*b)
	end
end
